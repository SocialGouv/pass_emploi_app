def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 33

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    defaultConfig {
        applicationId "fr.fabrique.social.gouv.passemploi"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'fr.fabrique.social.gouv.passemploi'
        ]
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            // In order to fix "[CLOUD_FIRESTORE] The service is currently unavailable" issue
            // https://github.com/firebase/flutterfire/discussions/5708#discussioncomment-925997
            shrinkResources false
            minifyEnabled false
        }
    }

    flavorDimensions "brand", "env"

    productFlavors {
        brsa {
            dimension "brand"
            applicationId "fr.fabrique.social.gouv.passemploi.rsa"
            resValue "string", "app_name", "Pass Emploi"
        }
        cej {
            dimension "brand"
            applicationId "fr.fabrique.social.gouv.passemploi"
            resValue "string", "app_name", "CEJ"
        }
        staging {
            dimension "env"
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
        }
        prod {
            dimension "env"
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }

    // Required to make flutter tool not exit with an error on aab build with multiple flavors
    // https://github.com/flutter/flutter/issues/65264#issuecomment-707013948
    applicationVariants.all { variant ->
        variant.outputs.all {
            def taskSuffix = variant.name.capitalize()
            def bundleTaskName = "bundle${taskSuffix}"
            if (tasks.findByName(bundleTaskName)) {
                def copyAABTask = tasks.create(name: "copyAndRenameAab${taskSuffix}") {
                    //project.logger.lifecycle("#GAD# Starting task copyAndRenameAab${taskSuffix}")
                    def bundleBuildDir = "${buildDir}/outputs/bundle"
                    project.logger.lifecycle("#GAD# bundleBuildDir: ${bundleBuildDir}")
                    def originalDirPath = "${variant.productFlavors.name.join()}${variant.buildType.name}"
                    project.logger.lifecycle("#GAD# originalDirPath: ${originalDirPath}")
                    def originalFileName = "${project.archivesBaseName}-${variant.productFlavors.name.join('-')}-${variant.buildType.name}.aab"
                    project.logger.lifecycle("#GAD# originalFileName: ${originalFileName}")
                    //from "${bundleBuildDir}/${originalDirPath}/${originalFileName}"
                    //project.logger.lifecycle("#GAD# from: ${bundleBuildDir}/${originalDirPath}/${originalFileName}")
                    //into "${bundleBuildDir}/${variant.buildType.name}/"
                    //project.logger.lifecycle("#GAD# into: ${bundleBuildDir}/${variant.buildType.name}/")
                    //rename("${originalFileName}", "app.aab")
                    //project.logger.lifecycle("#GAD# rename: ${originalFileName} to app.aab")
                }
                //copyAABTask.outputs.upToDateWhen { false }
                tasks[bundleTaskName].finalizedBy = [copyAABTask]
            }
        }
    }
/*
    task copyAndRenameAabCejStagingRelease(type: Copy) {
        dependsOn 'bundleCejStagingRelease'
        doLast {
            project.logger.lifecycle("#GAD# Starting copyAndRenameAabCejStagingRelease")
            def bundleBuildDir = "${buildDir}/outputs/bundle"
            def originalDirPath = "${variant.productFlavors.name.join()}${variant.buildType.name}"
            def originalFileName = "${project.archivesBaseName}-${variant.productFlavors.name.join('-')}-${variant.buildType.name}.aab"
            from "${bundleBuildDir}/${originalDirPath}/${originalFileName}"
            into "${bundleBuildDir}/${variant.buildType.name}/"
            rename("${originalFileName}", "app.aab")
        }
    }
*/

    /*task copyAndRenameAabCejStagingRelease(type: Copy) {
        dependsOn ':app:bundleCejStagingRelease'
        outputs.file 'app.aab'
        inputs.file 'build/app/outputs/bundle/cejStagingRelease/app-cej-staging-release.aab'
        doLast {
            copy {
                from 'build/app/outputs/bundle/cejStagingRelease/app-cej-staging-release.aab'
                into 'build/app/outputs/bundle/release'
                rename 'app-cej-staging-release.aab', 'app.aab'
            }
        }
    }*/
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
