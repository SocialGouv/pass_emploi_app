def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 33

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    defaultConfig {
        applicationId "fr.fabrique.social.gouv.passemploi"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'fr.fabrique.social.gouv.passemploi'
        ]
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "brand", "env"

    productFlavors {
        brsa {
            dimension "brand"
            applicationId "fr.fabrique.social.gouv.passemploi.rsa"
            resValue "string", "app_name", "pass emploi"
        }
        cej {
            dimension "brand"
            applicationId "fr.fabrique.social.gouv.passemploi"
            resValue "string", "app_name", "CEJ"
        }
        staging {
            dimension "env"
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
        }
        prod {
            dimension "env"
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }

    // Required to make flutter tool not exit with an error on aab build with multiple flavors
    // https://github.com/flutter/flutter/issues/65264#issuecomment-707013948
    applicationVariants.all { variant ->
        variant.outputs.all {
            def taskSuffix = variant.name.capitalize()
            def bundleTaskName = "bundle${taskSuffix}"
            if (tasks.findByName(bundleTaskName)) {
                def copyAABTask = tasks.create(name: "copyAndRenameAab${taskSuffix}", type: Copy) {
                    def bundleBuildDir = "${buildDir}/outputs/bundle"
                    def flavorsCapitalized = variant.productFlavors.name.withIndex().collect { flavor, index -> index == 0 ? flavor : flavor.capitalize() }
                    def originalDirPath = "${flavorsCapitalized.join()}${variant.buildType.name.capitalize()}"
                    def originalFileName = "${project.archivesBaseName}-${variant.productFlavors.name.join('-')}-${variant.buildType.name}.aab"
                    from "${bundleBuildDir}/${originalDirPath}/${originalFileName}"
                    into "${bundleBuildDir}/${variant.buildType.name}/"
                    rename("${originalFileName}", "app.aab")
                }
                tasks[bundleTaskName].finalizedBy = [copyAABTask]
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation platform('org.jetbrains.kotlin:kotlin-bom:1.8.0')
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.5.1'
    implementation platform('androidx.compose:compose-bom:2022.10.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'

    implementation fileTree(include: ['matrixlib-1.2.87.aar'], dir: 'libs')
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.5.1'
    implementation 'androidx.annotation:annotation:1.6.0'
    implementation 'org.matrix.android:matrix-android-sdk2:1.5.4'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava3:2.9.0'
    implementation "io.reactivex.rxjava3:rxjava:3.0.1"
    implementation "io.reactivex.rxjava3:rxkotlin:3.0.0"
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"
    implementation 'com.github.Zhuinden:realm-monarchy:2.0.0'
    
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'

}


apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
