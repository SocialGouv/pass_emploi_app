name: Release - Mobile App

on:
  push:
    tags:
      - '*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '2.10.5'
      - name: Launch tests
        run: flutter test

  pre-build:
    runs-on: ubuntu-latest
    needs: test
    name: pre-build
    steps:
      - name: Get current timestamp
        id: getCurrentTimestamp
        run: echo "::set-output name=date::$(date +%s)"
    outputs:
      date: ${{ steps.getCurrentTimestamp.outputs.date }}


  build-android-prod:
    runs-on: ubuntu-latest
    needs: pre-build
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '2.10.5'

      - name: Write Google configuration for Android
        shell: bash
        run: |
          mkdir android/app/src/prod
          echo "$PROD_GOOGLE_SERVICE_B64" | base64 --decode > android/app/src/prod/google-services.json
        env:
          PROD_GOOGLE_SERVICE_B64: ${{ secrets.PROD_GOOGLE_SERVICE_B64 }}

      - name: Write key properties
        shell: bash
        run: |
          echo "$KEY_PROPERTIES_B64" | base64 --decode > android/key.properties
        env:
          KEY_PROPERTIES_B64: ${{ secrets.KEY_PROPERTIES_B64 }}

      - name: Write key store
        shell: bash
        run: |
          mkdir android/keystore
          echo "$KEYSTORE_B64" | base64 --decode > android/keystore/passemploi.jks
        env:
          KEYSTORE_B64: ${{ secrets.KEYSTORE_B64 }}

      - name: Write env
        shell: bash
        run: |
          echo "$PROD_RUNTIME_ENV_B64" | base64 --decode > env/.env.prod
        env:
          PROD_RUNTIME_ENV_B64: ${{ secrets.PROD_RUNTIME_ENV_B64 }}

      - name: Build Android appbundle
        run: |
          flutter pub get
          flutter build appbundle \
          --flavor prod \
          --build-number=${{ needs.pre-build.outputs.date }}


      - name: Deploy Android appbundle
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PROD_GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: fr.fabrique.social.gouv.passemploi
          releaseFiles: build/app/outputs/bundle/prodRelease/app-prod-release.aab
          track: internal
          status: completed

  build-ios-prod:
    runs-on: macos-11
    needs: pre-build
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '2.10.5'

      - name: Install Codemagic CLI tools
        shell: bash
        run: |
          pip3 install codemagic-cli-tools
          xcrun xcodebuild -version

      - name: Write p12 certificate
        shell: bash
        run: |
          echo "$P12_B64" | base64 --decode > ios/cert.p12
        env:
          P12_B64: ${{ secrets.P12_B64 }}

      - name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-filepath: "ios/cert.p12"
          p12-password: ${{ secrets.P12_PASSWORD }}

      - name: Write Apple prod API Key
        shell: bash
        run: |
          mkdir ~/.private_keys
          echo "$APPLE_PROD_API_KEY_B64" | base64 --decode > ios/AuthKey_"$APPLE_PROD_API_KEY".p8
        env:
          APPLE_PROD_API_KEY: ${{ secrets.APPLE_PROD_API_KEY }}
          APPLE_PROD_API_KEY_B64: ${{ secrets.APPLE_PROD_API_KEY_B64 }}

      - name: Set up a temporary keychain for code signing
        shell: bash
        run: |
          keychain initialize

      - name: Fetch the code signing files from App Store Connect
        shell: bash
        run: |
          export APP_STORE_CONNECT_ISSUER_ID="$APPLE_PROD_API_ISSUER"
          export APP_STORE_CONNECT_KEY_IDENTIFIER="$APPLE_PROD_API_KEY"
          export APP_STORE_CONNECT_PRIVATE_KEY=`cat ios/AuthKey_"$APPLE_PROD_API_KEY".p8`
          app-store-connect fetch-signing-files $(xcode-project detect-bundle-id) \
            --platform IOS \
            --type IOS_APP_STORE \
            --certificate-key=@env:APPLE_P12_PRIVATE_KEY \
            --create
        env:
          APPLE_PROD_API_ISSUER: ${{ secrets.APPLE_PROD_API_ISSUER }}
          APPLE_PROD_API_KEY: ${{ secrets.APPLE_PROD_API_KEY }}
          APPLE_P12_PRIVATE_KEY: ${{secrets.APPLE_P12_PRIVATE_KEY}}

      - name: Add fetched certificates to keychain
        shell: bash
        run: |
          keychain add-certificates

      - name: Write Google configuration for ios
        shell: bash
        run: |
          mkdir -p ios/firebase-config/prod
          echo "$PROD_GOOGLE_SERVICE_IOS_B64" | base64 --decode > ios/firebase-config/prod/GoogleService-Info.plist
        env:
          PROD_GOOGLE_SERVICE_IOS_B64: ${{ secrets.PROD_GOOGLE_SERVICE_IOS_B64 }}

      - name: Write env
        shell: bash
        run: |
          echo "$PROD_RUNTIME_ENV_B64" | base64 --decode > env/.env.prod
        env:
          PROD_RUNTIME_ENV_B64: ${{ secrets.PROD_RUNTIME_ENV_B64 }}

      - name: Write staging plist files (required for xcodebuild to succeed)
        shell: bash
        run: |
          echo "$STAGING_OPTIONS_PLIST_B64" | base64 --decode > ios/StagingOptionsPlist.plist
        env:
          STAGING_OPTIONS_PLIST_B64: ${{ secrets.STAGING_OPTIONS_PLIST_B64 }}

      - name: Update Xcode project settings with fetched code signing profiles and create prod_export_options.plist
        shell: bash
        run: |
          xcode-project use-profiles --export-options-plist ios/prod_export_options.plist

      - name: Install Flutter dependencies
        shell: bash
        run: |
          flutter pub get

      - name: Install CocoaPods dependencies
        shell: bash
        run: |
          find . -name "Podfile" -execdir pod install \;

      - name: Build IPA with generated prod_export_options.plist
        shell: bash
        run: |
          flutter build ipa \
          --flavor prod \
          --build-number=${{ needs.pre-build.outputs.date }} \
          --export-options-plist=ios/prod_export_options.plist \
          --no-pub \
          --verbose

      - name: Deploy app to App Store Connect
        shell: bash
        run: |
          export APP_STORE_CONNECT_ISSUER_ID="$APPLE_PROD_API_ISSUER"
          export APP_STORE_CONNECT_KEY_IDENTIFIER="$APPLE_PROD_API_KEY"
          export APP_STORE_CONNECT_PRIVATE_KEY=`cat ios/AuthKey_"$APPLE_PROD_API_KEY".p8`
          app-store-connect publish \
            --path $(find $(pwd) -name "*.ipa")
        env:
          APPLE_PROD_API_ISSUER: ${{ secrets.APPLE_PROD_API_ISSUER }}
          APPLE_PROD_API_KEY: ${{ secrets.APPLE_PROD_API_KEY }}
          APPLE_P12_PRIVATE_KEY: ${{secrets.APPLE_P12_PRIVATE_KEY}}
