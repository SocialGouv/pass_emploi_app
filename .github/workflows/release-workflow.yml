name: Release - Mobile App

on:
  pull_request:

jobs:
  pre-build:
    runs-on: ubuntu-latest
    name: pre-build
    steps:
      - name: Get current timestamp
        id: getCurrentTimestamp
        run: echo "::set-output name=date::$(date +%s)"
    outputs:
      date: ${{ steps.getCurrentTimestamp.outputs.date }}

  build-ios-prod:
    runs-on: macos-12
    needs: pre-build
    steps:
      - uses: actions/checkout@v3

      - name: Set Environment Variables
        uses: ./.github/actions/setvars
        with:
          varFilePath: ./.github/variables/myvars.env

      - uses: subosito/flutter-action@v2
        with:
          cache: true
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Check Codemagic CLI cache
        uses: actions/cache@v3
        id: codemagic-cache
        with:
          path: /Users/runner/hostedtoolcache/Python/${{ env.PYTHON_VERSION }}/x64
          key: ${{ runner.os }}-codemagic

      - name: Install Codemagic CLI tools
        if: steps.codemagic-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          pip3 install codemagic-cli-tools

      - name: Write Google configuration for ios
        shell: bash
        run: |
          mkdir -p ios/firebase-config/cejProd
          mkdir -p ios/firebase-config/brsaProd
          echo "$CEJ_PROD_GOOGLE_SERVICE_IOS_B64" | base64 --decode > ios/firebase-config/cejProd/GoogleService-Info.plist
          echo "$BRSA_PROD_GOOGLE_SERVICE_IOS_B64" | base64 --decode > ios/firebase-config/brsaProd/GoogleService-Info.plist
        env:
          CEJ_PROD_GOOGLE_SERVICE_IOS_B64: ${{ secrets.CEJ_PROD_GOOGLE_SERVICE_IOS_B64 }}
          BRSA_PROD_GOOGLE_SERVICE_IOS_B64: ${{ secrets.BRSA_PROD_GOOGLE_SERVICE_IOS_B64 }}

      - name: Write env
        shell: bash
        run: |
          echo "$PROD_RUNTIME_ENV_B64" | base64 --decode > env/.env.prod
        env:
          PROD_RUNTIME_ENV_B64: ${{ secrets.PROD_RUNTIME_ENV_B64 }}

      - name: Install Flutter dependencies
        shell: bash
        run: |
          flutter pub get

      - name: Install CocoaPods dependencies
        shell: bash
        run: |
          find . -name "Podfile" -execdir pod install \;

      - name: Write p12 certificate
        shell: bash
        run: |
          echo "$P12_B64" | base64 --decode > ios/cert.p12
        env:
          P12_B64: ${{ secrets.P12_B64 }}

      - name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-filepath: "ios/cert.p12"
          p12-password: ${{ secrets.P12_PASSWORD }}

      - name: Write Apple prod API Key
        shell: bash
        run: |
          mkdir ~/.private_keys
          echo "$APPLE_PROD_API_KEY_B64" | base64 --decode > ios/AuthKey_"$APPLE_PROD_API_KEY".p8
        env:
          APPLE_PROD_API_KEY: ${{ secrets.APPLE_PROD_API_KEY }}
          APPLE_PROD_API_KEY_B64: ${{ secrets.APPLE_PROD_API_KEY_B64 }}

      - name: BRSA - Set up a temporary keychain for code signing
        shell: bash
        run: |
          keychain initialize

      - name: BRSA - Fetch the code signing files from App Store Connect
        shell: bash
        run: |
          export APP_STORE_CONNECT_ISSUER_ID="$APPLE_PROD_API_ISSUER"
          export APP_STORE_CONNECT_KEY_IDENTIFIER="$APPLE_PROD_API_KEY"
          export APP_STORE_CONNECT_PRIVATE_KEY=`cat ios/AuthKey_"$APPLE_PROD_API_KEY".p8`
          app-store-connect fetch-signing-files fr.fabrique.social.gouv.passemploi.rsa \
            --platform IOS \
            --type IOS_APP_STORE \
            --certificate-key=@env:APPLE_P12_PRIVATE_KEY \
            --create
        env:
          APPLE_PROD_API_ISSUER: ${{ secrets.APPLE_PROD_API_ISSUER }}
          APPLE_PROD_API_KEY: ${{ secrets.APPLE_PROD_API_KEY }}
          APPLE_P12_PRIVATE_KEY: ${{secrets.APPLE_P12_PRIVATE_KEY}}

      - name: BRSA - Add fetched certificates to keychain
        shell: bash
        run: |
          keychain add-certificates

      - name: BRSA - Update Xcode project settings with fetched code signing profiles and create prod_export_options.plist
        shell: bash
        run: |
          xcode-project use-profiles --export-options-plist ios/prod_export_options.plist

      - name: BRSA - Build IPA with generated prod_export_options.plist
        shell: bash
        run: |
          flutter build ipa \
          -t lib/brsa_main.dart \
          --flavor brsaProd \
          --release \
          --build-number=${{ needs.pre-build.outputs.date }} \
          --export-options-plist=ios/prod_export_options.plist \
          --no-pub \
          --verbose

      - name: BRSA - Deploy app to App Store Connect
        shell: bash
        run: |
          mv "$(find $(pwd) -name "pass emploi.ipa")" pass-emploi.ipa
          export APP_STORE_CONNECT_ISSUER_ID="$APPLE_PROD_API_ISSUER"
          export APP_STORE_CONNECT_KEY_IDENTIFIER="$APPLE_PROD_API_KEY"
          export APP_STORE_CONNECT_PRIVATE_KEY=`cat ios/AuthKey_"$APPLE_PROD_API_KEY".p8`
          app-store-connect publish \
            --path $(find $(pwd) -name "pass-emploi.ipa")
        env:
          APPLE_PROD_API_ISSUER: ${{ secrets.APPLE_PROD_API_ISSUER }}
          APPLE_PROD_API_KEY: ${{ secrets.APPLE_PROD_API_KEY }}
          APPLE_P12_PRIVATE_KEY: ${{secrets.APPLE_P12_PRIVATE_KEY}}
